# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
- name: Reuse common code
  include_tasks: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/roles/common/config_apply.yml"

- name: Setup variables
  set_fact:
    testdir: "{{ playbook_dir }}/../../vars/{{ pteenv }}/CITest"

- name: Create channel and channel orgs list
  set_fact:
    channels: |
      {{ channels | default([]) + [{ 'name': item.name | default(),
        'orgs': item.orgs | default([]),
        'orderer': item.orderer | default() }] }}
  with_items: "{{ pte.ptechannels }}"

- name: Sort the channel list
  set_fact:
    channels: "{{ channels | unique | sort }}"

- name: Get the number of channels
  set_fact:
    channelnum: "{{ channelnum | default() + item | default() }}"
  with_sequence: count={{ channels|length }}

- name: make channelnum list
  set_fact:
    channelnum: "{{ channelnum | list }}"

- name: Transaction rate parameters
  set_fact:
    transMode: "{{ pte.transaction.transMode | default('Constant') }}"
    targetPeers: "{{ pte.transaction.targetPeers | default('OrgAnchor') }}"
    TLS: "{{ pte.transaction.TLS | default('enabled') }}"
    nProcPerOrg: "{{ pte.transaction.nProcPerOrg | default(1) }}"
    nRequest: "{{ pte.transaction.nRequest | default(1000) }}"
    runDur: "{{ pte.transaction.runDur | default(120) }}"
    peerFailover: "{{ pte.transaction.peerFailover | default('False') }}"
    ordererFailover: "{{ pte.transaction.ordererFailover | default('False') }}"

- name: Transaction mode for MIX
  set_fact:
    mixQuery: "{{ pte.transaction.mixOpt.mixQuery | default('False') }}"
    mixFreq: "{{ pte.transaction.mixOpt.mixFreq | default(1000) }}"
  when: transMode == "Mix"

- name: Transaction mode for BURST
  set_fact:
    burstFreq0: "{{ pte.transaction.burstOpt.burstFreq0 | default(500) }}"
    burstDur0: "{{ pte.transaction.burstOpt.burstDur0 | default(3000) }}"
    burstFreq1: "{{ pte.transaction.burstOpt.burstFreq1 | default(2000) }}"
    burstDur1: "{{ pte.transaction.burstOpt.burstDur1 | default(10000) }}"
  when: transMode == "Burst"

- name: Transaction mode for CONSTANT
  set_fact:
    recHist: "{{ pte.transaction.constantOpt.recHist | default('HIST') }}"
    constFreq: "{{ pte.transaction.constantOpt.constFreq | default(100) }}"
    devFreq: "{{ pte.transaction.constantOpt.devFreq | default(20) }}"
  when: transMode == "Constant"

- name: Event options
  set_fact:
    eventType: "{{ pte.transaction.eventOpt.type | default('FilteredBlock') }}"
    eventListener: "{{ pte.transaction.eventOpt.listener | default('Block') }}"
    eventTimeout: "{{ pte.transaction.eventOpt.timeout | default(480000) }}"

- name: Timeout Options
  set_fact:
    preconfig: "{{ pte.transaction.timeoutOpt.preConfig | default(300000) }}"
    request: "{{ pte.transaction.timeoutOpt.request | default(300000) }}"
    grpcTimeout: "{{ pte.transaction.timeoutOpt.grpcTimeout | default(10000) }}"

- name: failover Options
  set_fact:
    method: "{{ pte.transaction.failoverOpt.method | default('RoundRobin') }}"
    list: "{{ pte.transaction.failoverOpt.list | default('targetPeers') }}"

- name: Payload options
  set_fact:
    payLoadType: "{{ pte.transaction.ccOpt.payLoadType | default('Random') }}"
    payLoadMin: "{{ pte.transaction.ccOpt.payLoadMin | default(1024) }}"
    payLoadMax: "{{ pte.transaction.ccOpt.payLoadMax | default(1024) }}"

- name: Create list
  set_fact:
    channellists: |
      {{ channellists | default([]) + [{ 'name': item.0.name | default(),
        'orgs': item.0.orgs | default([]),
        'nOrgs': item.0.orgs | length | default(),
        'orderer': item.0.orderer | default(),
        'channelnum': item.1|int }] }}
  with_together:
    - "{{ channels }}"
    - "{{ channelnum }}"

- name: Endorsement Policy Identities
  set_fact:
    identities: |
      {{ identities | default([]) + [{ 'role': item.role | default('peer'),
        'orgs': item.orgs | default([]) }] }}
  with_items: "{{ pte.transaction.endorsement.identities }}"

- name: Endorsement policy
  set_fact:
    policy: "{{ item | default('\"1-of\": [{ \"signed-by\": 0 }, { \"signed-by\": 1 }]') }}"
  with_items: "{{ pte.transaction.endorsement.policy }}"

- name: Make list for channels
  set_fact:
    endlist: "{{ (channelnum|length)/2 | int }}"
  when: "{{ (channelnum|length) | int }} is even"
  register: countvar

- name: Make list for channels
  set_fact:
    endlist: "{{ (channelnum|length + 1)/2 | int }}"
  when: "{{ (channelnum|length) | int }} is odd"
  register: countvar

- name: testcase
  set_fact:
    testcase: "{{ testcase | default('multihost') }}"

- name: testcase_query
  set_fact:
    testcase_query: "{{ testcase_query | default('multihost_query') }}"

- name: Create testcase root directory
  file:
    path: "{{ testdir }}"
    state: directory
    force: yes
    mode: 0775

- name: Create the channel transaction
  shell: >-
    export FABRIC_CFG_PATH={{ fabricworkdir }} &&
    {{ fabricpath }}/bin/configtxgen -profile OrgChannel
    -outputCreateChannelTx {{ testdir }}/{{ item.name }}.tx -channelID {{ item.name }}
  args:
    chdir: "{{ testdir }}"
  with_items: "{{ channels }}"

- name: Create the anchor peer transaction
  shell: >-
    export FABRIC_CFG_PATH={{ fabricworkdir }} &&
    {{ fabricpath }}/bin/configtxgen -profile OrgChannel
    -outputAnchorPeersUpdate {{ testdir }}/{{ item.1 }}{{ item.0.name }}anchor.tx -channelID {{ item.0.name }} -asOrg {{ item.1 }}
  args:
    chdir: "{{ testdir }}"
  when: item.1 in item.0.orgs
  with_nested:
    - "{{ channellists }}"
    - "{{ peerorgs }}"

- name: Create scenario directory
  file:
    path: "{{ testdir }}/{{ item }}"
    state: directory
    force: yes
    mode: 0775
  with_items:
    - "{{ testcase }}"
    - "{{ testcase_query }}"
  when: testcase == "multihost"

- name: Create preconfig directory for invoke
  file:
    path: "{{ testdir }}/{{ testcase }}/preconfig/{{ item }}"
    state: directory
    force: yes
    mode: 0755
  with_items:
    - channels
    - "{{ chaincode }}"
  when: testcase == "multihost"

- name: Create chaincode directory for invoke and query
  file:
    path: "{{ testdir }}/{{ item }}/{{ chaincode }}"
    state: directory
    force: yes
    mode: 0755
  with_items:
    - "{{ testcase }}"
    - "{{ testcase_query }}"
  when: testcase == "multihost"

- name: Create CISCFiles directory
  file:
    path: "{{ testdir }}/CISCFiles"
    state: directory
    mode: 0755

- name: Create config file
  template:
    src: "{{ playbook_dir }}/admin/templates/config-chan-TLS.j2"
    dest: "{{ testdir }}/CISCFiles/config-chan{{ item.1 }}-TLS.json"
  with_together:
    - "{{ channels }}"
    - "{{ channelnum }}"
