# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
- name: Setup variables
  set_fact:
    goroot: "/opt/go"
    gopath: "/opt/gopath/{{ env }}"
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    fabricpath: "/opt/gopath/{{ env}}/src/github.com/hyperledger/fabric"
    fabrictestpath: "/opt/gopath/{{ env }}/src/github.com/hyperledger/fabric-test"
    target: "{{ target | default('configtxgen') }}"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
    kafkals: "{{ kafkals | default([]) + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name : Create channel and channel orgs list
  set_fact:
    channels: |
      {{ channels | default([]) + [{ 'name':item.name | default(),
        'orgs':item.orgs | default([]),
        'orderer': item.orderer | default() }] }}
  with_items: "{{ pte.ptechannels }}"

- name: Sort the channel list
  set_fact:
    channels: "{{ channels | unique | sort }}"

- name: Get the number of channels
  set_fact:
    channelnum: "{{ channelnum | default() + item | default() }}"
  with_sequence: count={{ channels|length }}

- name: make channelnum list
  set_fact:
    channelnum: "{{ channelnum | list }}"

- name: Transaction rate parameters
  set_fact:
    transMode: "{{ pte.transaction.transMode }}"
    targetPeers: "{{ pte.transaction.targetPeers }}"
    nProcPerOrg: "{{ pte.transaction.nProcPerOrg }}"
    nRequest: "{{ pte.transaction.nRequest }}"
    runDur: "{{ pte.transaction.runDur }}"
    peerFailover: "{{ pte.transaction.peerFailover }}"
    ordererFailover: "{{ pte.transaction.ordererFailover }}"

- name: Transaction mode for MIX
  set_fact:
    mixQuery: "{{ pte.transaction.mixOpt.mixQuery }}"
    mixFreq: "{{ pte.transaction.mixOpt.mixFreq }}"
  when: transMode == "Mix"

- name: Transaction mode for BURST
  set_fact:
    burstFreq0: "{{ pte.transaction.burstOpt.burstFreq0 }}"
    burstDur0: "{{ pte.transaction.burstOpt.burstDur0 }}"
    burstFreq1: "{{ pte.transaction.burstOpt.burstFreq1 }}"
    burstDur1: "{{ pte.transaction.burstOpt.burstDur1 }}"
  when: transMode == "Burst"

- name: Transaction mode for CONSTANT
  set_fact:
    recHist: "{{ pte.transaction.constantOpt.recHist }}"
    constFreq: "{{ pte.transaction.constantOpt.constFreq }}"
    devFreq: "{{ pte.transaction.constantOpt.devFreq }}"
  when: transMode == "Constant"

- name: Event options
  set_fact:
    eventType: "{{ pte.transaction.eventOpt.type }}"
    eventListener: "{{ pte.transaction.eventOpt.listener }}"
    eventTimeout: "{{ pte.transaction.eventOpt.timeout }}"

- name: Timeout Options
  set_fact:
    preconfig: "{{ pte.transaction.timeoutOpt.preConfig }}"
    request: "{{ pte.transaction.timeoutOpt.request }}"

- name: failover Options
  set_fact:
    method: "{{ pte.transaction.failoverOpt.method }}"
    list: "{{ pte.transaction.failoverOpt.list }}"

- name: Payload options
  set_fact:
    payLoadType: "{{ pte.transaction.ccOpt.payLoadType }}"
    payLoadMin: "{{ pte.transaction.ccOpt.payLoadMin }}"
    payLoadMax: "{{ pte.transaction.ccOpt.payLoadMax }}"

- name: Create list
  set_fact:
    channellists: |
      {{ channellists | default([]) + [{ 'name':item.0.name | default(),
        'orgs':item.0.orgs | default([]),
        'orderer': item.0.orderer | default(),
        'channelnum': item.1|int }] }}
  with_together:
    - "{{ channels }}"
    - "{{ channelnum }}"

- debug:
    var: kafkals

- name: Get ca object list
  set_fact:
    cas: |
      {{ cas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ cals }}"
  when: cals | length > 0

- name: Get ca object list
  set_fact:
    cas: "{{ cas | default([]) }}"

- name: Sort the ca list
  set_fact:
    cas: "{{ cas | sort(attribute='org') }}"

- name: Get peer object list
  set_fact:
    peers: |
      {{ peers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.','-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Sort the peer list
  set_fact:
    peers: "{{ peers | sort(attribute='org') }}"

- name: Get orderer object list
  set_fact:
    orderers: |
      {{ orderers | default([]) + [{'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ ordererls }}"

- name: Sort the orderer list
  set_fact:
    orderers: "{{ orderers | sort(attribute='org') }}"
    allorgs: "{{ [] }}"

- name: Sort the ca and kafka list
  set_fact:
    caorgs: "{{ cas | map(attribute='org') | list  | unique | sort }}"
    peerorgs: "{{ peers | map(attribute='org') | list  | unique | sort }}"
    ordererorgs: "{{ orderers | map(attribute='org') | list  | unique | sort }}"
    kafkas: "{{ kafkals | sort }}"

- name: Setup fabric directory
  file:
    path: "{{ fabricpath }}"
    state: directory
    force: yes
    mode: 0775

- name: Setup fabrictest directory
  file:
    path: "{{ fabrictestpath }}"
    state: directory
    force: yes
    mode: 0775

- name: Clean the build log file
  file:
    path: "{{ gopath }}/build.log"
    state: "absent"

- name: Extract hyperledger fabric code
  git:
    repo: "{{ GIT_URL | default('http://gerrit.hyperledger.org/r/fabric') }}"
    dest: "{{ fabricpath }}"
    force: yes
    refspec: "{{ GERRIT_REFSPEC | default('') }}"
    version: "{{ (GERRIT_REFSPEC == '') | ternary('HEAD','FETCH_HEAD') }}"
    depth: 1
  tags: "code"

- name: Make targets
  shell: "make {{ item }} >> {{ gopath }}/build.log"
  args:
    chdir: "{{ fabricpath }}"
  with_items: "{{ target }}"
  environment:
    GOROOT: "{{ goroot }}"
    GOPATH: "{{ gopath }}"
    PATH: "{{ ansible_env.PATH}}:{{ goroot }}/bin"
  tags: "make"

- name: Create the channel transaction
  shell: >-
    export FABRIC_CFG_PATH={{ fabricworkdir }} &&
    {{ fabricpath }}/build/bin/configtxgen -profile OrgChannel
    -outputCreateChannelTx keyfiles/{{ item.name }}.tx -channelID {{ item.name }}
  args:
    chdir: "{{ fabricworkdir }}"
  with_items: "{{ channels }}"

- name: Define the anchor peer for organizations
  shell: >-
    export FABRIC_CFG_PATH={{ fabricworkdir }} &&
    {{ fabricpath }}/build/bin/configtxgen -profile OrgChannel
    -outputAnchorPeersUpdate keyfiles/{{ item[0] }}.anchor.tx
    -channelID {{ item[1].name }} -asOrg {{ item[0] }}
  args:
    chdir: "{{ fabricworkdir }}"
  with_nested:
    - "{{ peerorgs }}"
    - "{{ channels }}"

- name: Extract hyperledger fabric-test code
  git:
    repo: "http://gerrit.hyperledger.org/r/fabric-test"
    dest: "{{ fabrictestpath }}"
    force: yes
    depth: 1

- name: Initializing the git submodules in fabric-test
  shell: "git submodule update --init --recursive && git submodule foreach git pull origin master"
  args:
    chdir: "{{ fabrictestpath }}"
