#! Copyright IBM Corp. All Rights Reserved.
#!
#! SPDX-License-Identifier: Apache-2.0
---
#! fabric_version:
#! Released images are pulled from docker hub hyperledger/, e.g. 1.4.1 or 2.0.0
#! Development stream images are pulled from
#! nexus3.hyperledger.org:10001/hyperledger/, e.g. 1.4.1-stable or 2.0.0-stable
fabric_version: 2.0.0-stable
#! peer database ledger type (couchdb, goleveldb)
db_type: couchdb
#! This parameter is used to define fabric logging spec in peers
peer_fabric_logging_spec: info
#! This parameter is used to define fabric logging spec in orderers
orderer_fabric_logging_spec: info
#! tls in the network (true, false or mutual(mutualtls))
tls: true
#! fabric metrics with prometheus (true/false)
metrics: true

#! Location where crypto-config and channel-artifacts are stored
artifacts_location: /var/lib/jenkins/workspace/k8s_systemTest/gopath/src/github.com/hyperledger/fabric-test/fabric/internal/cryptogen/

#! Orderer Config Settings
orderer:
#! Consensus type
  orderertype: kafka
  batchsize:
    maxmessagecount: 500
    absolutemaxbytes: 10 MB
    preferredmaxbytes: 2 MB
  batchtimeout: 2s
#! Etcd raft options and this will be used when orderertype is
#! selected as etcdraft
  etcdraft_options:
    TickInterval: 500ms
    ElectionTick: 10
    HeartbeatTick: 1
    MaxInflightBlocks: 5
    SnapshotIntervalSize: 100 MB

#! Number of kafka and zookeeper to be launched in network
#! when orderertype is kafka
kafka:
  num_kafka: 5
  #! number of kafka replications for each channel
  num_kafka_replications: 3
  num_zookeepers: 3

orderer_organizations:
- name: ordererorg1
  msp_id: OrdererOrgExampleCom
  num_orderers: 1
  num_ca: 1

peer_organizations:
- name: org1
  msp_id: Org1ExampleCom
  num_peers: 2
  num_ca: 1

- name: org2
  msp_id: Org2ExampleCom
  num_peers: 2
  num_ca: 1

#! Capabilites for Orderer, Channel, Application groups
orderer_capabilities:
  V1_4_2: true

channel_capabilities:
  V2_0: true

application_capabilities:
  V2_0: true

#! Create the channel creation transactions; every org will be included in every channel
#! This used testorgschannel as the prefix and channels are used like testorgschannel0,
#! testorgschannel1.... based on number of channels passed
#! (note: client will need to submit the transactions to create channels)
num_channels: 10

k8s:
  service_type: NodePort
  #! data_persistence is used to store the data from fabric containers
  #! It can take values of true, false and local
  #! When true is used, it uses storage_class and storage_capacity to create
  #! persistent volumes. When false is used, backup will not be configured.
  #! When local is used, hostPath will be used to store the data from fabric containers
  #! to worker nodes on which pods are running.
  data_persistence: false
  storage_class: ibmc-file-gold
  storage_capacity: 20Gi

#!#! TODO: future enhancement to read individual profiles for each channel creation.
#!profiles:
#!- name: TwoOrgsOrdererGenesis
#!  orderers:
#!    - orderer0
#!- name: TwoOrgsChannelProfile
#!  consortium: SampleConsortium
#!  organizations:
#!    - org1
#!    - org2
#!- name: AnotherChannelProfile
#!  consortium: SampleConsortium
#!  organizations:
#!    - org3
#!    - org4
