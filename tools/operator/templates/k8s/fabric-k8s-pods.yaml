#! Copyright IBM Corp. All Rights Reserved.
#!
#! SPDX-License-Identifier: Apache-2.0

#@ load("@ytt:data", "data")
#@ def zkContainers(input, id, zklist, networkSpec):
#@   id = id + 1
#@   env = [{ "name": "ZOO_MY_ID", "value": "{}".format(id)}]
#@   env.append({"name": "ZOO_SERVERS", "value": "{}".format(zklist)})
#@   env.append({"name": "ZOO_TICK_TIME", "value": "2000"})
#@   env.append({"name": "ZOO_INIT_LIMIT", "value": "10"})
#@   env.append({"name": "ZOO_SYNC_LIMIT", "value": "2"})
#@   resources = {"limits":{"cpu": "0.2", "memory": "0.4Gi"}, "requests":{"cpu":"0.2", "memory":"0.4Gi"}}
#@   output = []
#@   if networkSpec.k8s.data_persistence == True:
#@     output = [{"volumeMounts":[{"mountPath": "/data", "name": "zookeeper-data-storage"}],"name": input, "image": "hyperledger/fabric-zookeeper", "imagePullPolicy": "Always", "env": env, "resources": resources}]
#@   else:
#@     output = [{"name": input, "image": "hyperledger/fabric-zookeeper", "imagePullPolicy": "Always", "env": env, "resources": resources}]
#@   end
#@   return output
#@ end

#@ def kafkaContainers(input, id, replicas, zklist, networkSpec):
#@   id = id + 1
#@   env = [{ "name": "KAFKA_BROKER_ID", "value": "{}".format(id)}]
#@   env.append({"name": "KAFKA_ZOOKEEPER_CONNECT", "value": "{}".format(zklist)})
#@   env.append({"name": "KAFKA_DEFAULT_REPLICATION_FACTOR", "value": "{}".format(replicas)})
#@   env.append({"name": "KAFKA_MAX_REQUEST_SIZE", "value": "104857600"})
#@   env.append({"name": "KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE", "value": "true"})
#@   env.append({"name": "KAFKA_MIN_INSYNC_REPLICAS", "value": "2"})
#@   env.append({"name": "KAFKA_LOG_DIRS", "value": "/opt/kafka/data" })
#@   env.append({"name": "KAFKA_MESSAGE_MAX_BYTES", "value": "103809024"})
#@   env.append({"name": "KAFKA_REPLICA_FETCH_MAX_BYTES", "value": "103809024"})
#@   resources = {"limits":{"cpu": "0.2", "memory": "0.5Gi"}, "requests":{"cpu":"0.2", "memory":"0.5Gi"}}
#@   output = []
#@   if networkSpec.k8s.data_persistence == True:
#@     output = [{"volumeMounts":[{"mountPath": "/opt/kafka/data", "name": "kafka-data-storage"}],"name": input, "image": "hyperledger/fabric-kafka", "imagePullPolicy": "Always", "env": env, "resources": resources}]
#@   else:
#@     output = [{"name": input, "image": "hyperledger/fabric-kafka", "imagePullPolicy": "Always", "env": env, "resources": resources}]
#@   end
#@   return output
#@ end

#@ def caContainers(input, value, networkSpec):
#@   ca_image = "hyperledger/fabric-ca"
#@   if networkSpec.fabric_version.endswith("-stable"):
#@     ca_image="nexus3.hyperledger.org:10001/hyperledger/fabric-ca:amd64-{}".format(networkSpec.fabric_version)
#@   end
#@   env = [{"name": "FABRIC_CA_HOME", "value": "/etc/hyperledger/fabric-ca-server"}]
#@   env.append({"name": "FABRIC_CA_SERVER_CA_NAME", "value": "{}".format(input)})
#@   env.append({"name": "FABRIC_CA_SERVER_CA_KEYFILE", "value": "/etc/hyperledger/fabric/artifacts/ca/ca_private.key"})
#@   env.append({"name": "FABRIC_CA_SERVER_CA_CERTFILE", "value": "/etc/hyperledger/fabric/artifacts/ca/ca-cert.pem"})
#@   if networkSpec.tls == "mutual":
#@     env.append({"name": "FABRIC_CA_SERVER_TLS_ENABLED", "value": "true"})
#@   else:
#@     env.append({"name": "FABRIC_CA_SERVER_TLS_ENABLED", "value": "{}".format(networkSpec.tls)})
#@   end
#@   env.append({"name": "FABRIC_CA_SERVER_TLS_KEYFILE", "value": "/etc/hyperledger/fabric/artifacts/tlsca/tlsca_private.key"})
#@   env.append({"name": "FABRIC_CA_SERVER_TLS_CERTFILE", "value": "/etc/hyperledger/fabric/artifacts/tlsca/tlsca-cert.pem"})
#@   resources = {"limits":{"cpu": "0.2", "memory": "0.5Gi"}, "requests":{"cpu":"0.2", "memory":"0.5Gi"}}
#@   volumeMounts = [{"mountPath": "/etc/hyperledger/fabric/certparser", "name": "certsparser"}]
#@   volumeMounts.append({"mountPath": "/etc/hyperledger/fabric/secret", "name": "mspsecret"})
#@   output = [{"name": input, "image": ca_image, "imagePullPolicy": "Always", "env": env, "resources": resources, "volumeMounts":volumeMounts, "command":["/bin/bash"], "args":["-c", "cd /etc/hyperledger/fabric/ && cp certparser/certs-parser.sh . && chmod +x ./certs-parser.sh && ./certs-parser.sh {}.json && fabric-ca-server start -b admin:adminpw -d" .format(input)]}]
#@   return output
#@ end

#@ def mutualTLS(networkSpec, type):
#@   output = []
#@   for i in range(0, len(data.values.peer_organizations)):
#@     organization = data.values.peer_organizations[i]
#@     if type == "clientrootca":
#@       output.append("/etc/hyperledger/fabric/artifacts/{}/ca.{}-cert.pem".format(organization.name, organization.name))
#@     elif type == "volumeMounts":
#@       output.append({"mountPath": "/etc/hyperledger/fabric/artifacts/{}".format(organization.name), "name": "{}-clientrootca-secret".format(organization.name)})
#@     elif type == "volumes":
#@       output.append({"name":"{}-clientrootca-secret".format(organization.name), "secret":{"secretName":"{}-clientrootca-secret".format(organization.name)}})
#@     end
#@   end
#@   for j in range(0, len(data.values.orderer_organizations)):
#@     organization = data.values.orderer_organizations[j]
#@     if type == "clientrootca":
#@       output.append("/etc/hyperledger/fabric/artifacts/{}/ca.{}-cert.pem".format(organization.name, organization.name))
#@     elif type == "volumeMounts":
#@       output.append({"mountPath": "/etc/hyperledger/fabric/artifacts/{}".format(organization.name), "name": "{}-clientrootca-secret".format(organization.name)})
#@     elif type == "volumes":
#@       output.append({"name":"{}-clientrootca-secret".format(organization.name), "secret":{"secretName":"{}-clientrootca-secret".format(organization.name)}})
#@     end
#@   end
#@   return output
#@ end

#@ def peerContainers(input, value, networkSpec, mspId):
#@   env = [{"name": "CORE_VM_ENDPOINT", "value": "localhost:2375"}]
#@   env.append({"name": "CORE_PEER_GOSSIP_USELEADERELECTION", "value": "True"})
#@   env.append({"name": "CORE_PEER_GOSSIP_ORGLEADER", "value": "false"})
#@   env.append({"name": "CORE_PEER_LISTENADDRESS", "value": "0.0.0.0:7051"})
#@   env.append({"name": "CORE_PEER_CHAINCODELISTENADDRESS", "value": "0.0.0.0:7052"})
#@   if networkSpec.tls == "mutual":
#@     env.append({"name": "CORE_PEER_TLS_CLIENTROOTCAS_FILES", "value": " ".join(mutualTLS(networkSpec, "clientrootca")) })
#@     env.append({"name": "CORE_PEER_TLS_CLIENTAUTHREQUIRED", "value": "true"})
#@     env.append({"name": "CORE_PEER_TLS_ENABLED", "value": "true"})
#@   else:
#@     env.append({"name": "CORE_PEER_TLS_ENABLED", "value": "{}".format(networkSpec.tls)})
#@   end
#@   env.append({"name": "FABRIC_LOGGING_SPEC", "value": networkSpec.peer_fabric_logging_spec})
#@   env.append({"name": "CORE_PEER_TLS_CERT_FILE", "value": "/etc/hyperledger/fabric/artifacts/tls/server.crt"})
#@   env.append({"name": "CORE_PEER_TLS_KEY_FILE", "value": "/etc/hyperledger/fabric/artifacts/tls/server.key"})
#@   env.append({"name": "CORE_PEER_TLS_ROOTCERT_FILE", "value": "/etc/hyperledger/fabric/artifacts/msp/tlscacerts/tlsca-cert.pem"})
#@   env.append({"name": "CORE_PEER_ID", "value": "{}".format(input)})
#@   env.append({"name": "CORE_PEER_GOSSIP_EXTERNALENDPOINT", "value": "{}:7051".format(input)})
#@   env.append({"name": "CORE_PEER_ADDRESS", "value": "{}:7051".format(input)})
#@   env.append({"name": "CORE_PEER_CHAINCODEADDRESS", "value": "localhost:7052"})
#@   env.append({"name": "CORE_PEER_LOCALMSPID", "value": "{}".format(mspId)})
#@   env.append({"name": "CORE_PEER_MSPCONFIGPATH", "value": "/etc/hyperledger/fabric/artifacts/msp"})
#@   env.append({"name": "CORE_PEER_FILESYSTEMPATH", "value": "/shared/data"})
#@   env.append({"name": "CORE_PEER_GOSSIP_EXTERNALENDPOINT", "value": "{}:7051".format(input)})
#@   env.append({"name": "CORE_PEER_GOSSIP_BOOTSTRAP", "value": "{}:7051".format(input)})
#@   if networkSpec.metrics == True:
#@     env.append({"name": "CORE_OPERATIONS_LISTENADDRESS", "value": ":9443"})
#@     env.append({"name": "CORE_OPERATIONS_TLS_ENABLED", "value": "false" })
#@     env.append({"name": "CORE_METRICS_PROVIDER", "value": "prometheus" })
#@   end
#@   volumeMounts = [{"mountPath": "/etc/hyperledger/fabric/certparser", "name": "certsparser"}]
#@   volumeMounts.append({"mountPath": "/etc/hyperledger/fabric/secret", "name": "mspsecret"})
#@   if networkSpec.tls == "mutual":
#@     volumeMounts += mutualTLS(networkSpec, "volumeMounts")
#@   end
#@   if networkSpec.k8s.data_persistence == True or networkSpec.k8s.data_persistence == "local":
#@     volumeMounts.append({"mountPath": "/shared/data", "name": "peer-data-storage"})
#@   end
#@   resources = {"limits":{"cpu": "2", "memory": "4Gi"}, "requests":{"cpu":"2", "memory":"4Gi"}}

#@   peer_image = "hyperledger/fabric-peer"
#@   if networkSpec.fabric_version.endswith("-stable"):
#@     peer_image="nexus3.hyperledger.org:10001/hyperledger/fabric-peer:amd64-{}".format(networkSpec.fabric_version)
#@   end

#@   if networkSpec.db_type == "couchdb":
#@     env.append({"name": "CORE_LEDGER_STATE_STATEDATABASE", "value": "CouchDB"})
#@     env.append({"name": "CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS", "value": "localhost:5984"})
#@     container = {"name":"couchdb-{}".format(input), "image": "hyperledger/fabric-couchdb", "imagePullPolicy": "Always", "securityContext":{"privileged":True}, "resources":{"limits":{"cpu": "2", "memory": "4Gi"}, "requests":{"cpu": "2", "memory": "4Gi"}}}
#@     output = [{"name": "dind", "image": "docker:dind", "securityContext": {"privileged": True}, "resources": resources}, {"name":input, "image": peer_image, "imagePullPolicy": "Always", "securityContext" : { "privileged": True }, "env": env, "volumeMounts":volumeMounts, "command": ["/bin/bash"], "args":["-c", "cd /etc/hyperledger/fabric/ && cp certparser/certs-parser.sh . && chmod +x ./certs-parser.sh && ./certs-parser.sh {}.json && peer node start".format(input)], "resources": resources}, container]
#@   else:
#@     output = [{"name": "dind", "image": "docker:dind", "securityContext": {"privileged": True}, "resources": resources}, {"name":input, "image": peer_image, "imagePullPolicy": "Always", "securityContext" : { "privileged": True }, "env": env, "volumeMounts":volumeMounts, "command": ["/bin/bash"], "args":["-c", "cd /etc/hyperledger/fabric/ && cp certparser/certs-parser.sh . && chmod +x ./certs-parser.sh && ./certs-parser.sh {}.json && peer node start".format(input)], "resources": resources}]
#@   end
#@   return output
#@ end


#@ def ordererContainers(input, value, networkSpec, mspId):
#@   env = [{"name": "ORDERER_GENERAL_LISTENADDRESS", "value": "0.0.0.0"}]
#@   env.append({"name": "ORDERER_GENERAL_GENESISMETHOD", "value": "file"})
#@   env.append({"name": "FABRIC_LOGGING_SPEC", "value": networkSpec.orderer_fabric_logging_spec})
#@   if networkSpec.tls == "mutual":
#@     env.append({"name": "ORDERER_GENERAL_TLS_CLIENTROOTCAS", "value": "[{}]".format(", ".join(mutualTLS(networkSpec, "clientrootca"))) })
#@     env.append({"name": "ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED", "value": "true"})
#@     env.append({"name": "ORDERER_GENERAL_TLS_ENABLED", "value": "true"})
#@   else:
#@     env.append({"name": "ORDERER_GENERAL_TLS_ENABLED", "value": "{}".format(networkSpec.tls)})
#@   end
#@   env.append({"name": "ORDERER_GENERAL_GENESISFILE", "value": "/etc/hyperledger/fabric/genesisblock/genesis.block"})
#@   env.append({"name": "ORDERER_GENERAL_LOCALMSPID", "value": "{}".format(mspId)})
#@   env.append({"name": "ORDERER_GENERAL_LOCALMSPDIR", "value": "/etc/hyperledger/fabric/artifacts/msp"})
#@   env.append({"name": "ORDERER_GENERAL_TLS_SERVERHOSTOVERRIDE", "value": input})
#@   env.append({"name": "ORDERER_GENERAL_TLS_PRIVATEKEY", "value": "/etc/hyperledger/fabric/artifacts/tls/server.key"})
#@   env.append({"name": "ORDERER_GENERAL_TLS_CERTIFICATE", "value": "/etc/hyperledger/fabric/artifacts/tls/server.crt"})
#@   env.append({"name": "ORDERER_GENERAL_TLS_ROOTCAS", "value": "[/etc/hyperledger/fabric/artifacts/msp/tlscacerts/tlsca-cert.pem]"})
#@   env.append({"name": "ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY", "value": "/etc/hyperledger/fabric/artifacts/tls/server.key"})
#@   env.append({"name": "ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE", "value": "/etc/hyperledger/fabric/artifacts/tls/server.crt"})
#@   env.append({"name": "ORDERER_FILELEDGER_LOCATION", "value": "/shared/data"})
#@   env.append({"name": "ORDERER_CONSENSUS_WALDIR", "value": "/shared/data/etcdraft/wal"})
#@   env.append({"name": "ORDERER_CONSENSUS_SNAPDIR", "value": "/shared/data/etcdraft/snapshot"})
#@   if networkSpec.metrics == True:
#@     env.append({"name": "ORDERER_OPERATIONS_LISTENADDRESS", "value": ":8443"})
#@     env.append({"name": "ORDERER_OPERATIONS_TLS_ENABLED", "value": "false" })
#@     env.append({"name": "ORDERER_METRICS_PROVIDER", "value": "prometheus" })
#@   end
#@   volumeMounts = [{"mountPath": "/etc/hyperledger/fabric/certparser", "name": "certsparser"}]
#@   volumeMounts.append({"mountPath": "/etc/hyperledger/fabric/secret", "name": "mspsecret"})
#@   volumeMounts.append({"mountPath": "/etc/hyperledger/fabric/genesisblock", "name": "genesisblock"})
#@   if networkSpec.tls == "mutual":
#@     volumeMounts += mutualTLS(networkSpec, "volumeMounts")
#@   end
#@   if networkSpec.k8s.data_persistence == True or networkSpec.k8s.data_persistence == "local":
#@     volumeMounts.append({"mountPath": "/shared/data", "name": "orderer-data-storage"})
#@   end
#@   resources = {"limits":{"cpu": "2", "memory": "4Gi"}, "requests":{"cpu":"2", "memory":"4Gi"}}
#@   orderer_image = "hyperledger/fabric-orderer"
#@   if networkSpec.fabric_version.endswith("-stable"):
#@     orderer_image="nexus3.hyperledger.org:10001/hyperledger/fabric-orderer:amd64-{}".format(networkSpec.fabric_version)
#@   end
#@   output = [{"name": input, "image": orderer_image, "imagePullPolicy": "Always", "env": env, "resources": resources, "volumeMounts": volumeMounts, "command":["/bin/bash"], "args":["-c", "cd /etc/hyperledger/fabric/ && cp certparser/certs-parser.sh . && chmod +x ./certs-parser.sh && ./certs-parser.sh {}.json && orderer".format(input)]}]
#@   return output
#@ end

#@ def kafkaSpec(input, id, replicas, type, numZK, networkSpec):
#@   type = {}
#@   specData = {}
#@   if input.startswith("zookeeper"):
#@     type = "zookeeper"
#@     if networkSpec.k8s.data_persistence == True:
#@       specData = {"volumes": [{"name":"zookeeper-data-storage","persistentVolumeClaim":{"claimName":"{}-data".format(input)}}],"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1,"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"type","operator": "In","values":["zookeeper"]}]},"topologyKey":"kubernetes.io/hostname"}}]}},
#@              "containers": zkContainers(input, id, zkList(numZK, type), networkSpec)}
#@     else:
#@       specData = {"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1,"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"type","operator": "In","values":["zookeeper"]}]},"topologyKey":"kubernetes.io/hostname"}}]}},
#@              "containers": zkContainers(input, id, zkList(numZK, type), networkSpec)}
#@     end
#@   elif input.startswith("kafka"):
#@     type = "kafka"
#@     if networkSpec.k8s.data_persistence == True:
#@     specData = {"volumes": [{"name":"kafka-data-storage","persistentVolumeClaim":{"claimName":"{}-data".format(input)}}],"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1,"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"type","operator": "In","values":["kafka"]}]},"topologyKey":"kubernetes.io/hostname"}}]}},
#@              "containers": kafkaContainers(input, id, replicas, zkList(numZK, type), networkSpec)}
#@     else:
#@       specData = {"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1,"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"type","operator": "In","values":["kafka"]}]},"topologyKey":"kubernetes.io/hostname"}}]}},
#@              "containers": kafkaContainers(input, id, replicas, zkList(numZK, type), networkSpec)}
#@     end
#@   end
#@   output= specData
#@   return output
#@ end

#@ def spec(input, orgName, value, networkSpec, mspId):
#@   type = {}
#@   specData = {}
#@   metadata = {}
#@   if input.startswith("ca"):
#@     type = "ca"
#@     specData = {"volumes":[{"name":"certsparser", "configMap":{"name":"certsparser"}}, {"name":"mspsecret", "secret":{"secretName":"{}".format(input)}}],
#@             "affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1, "podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"type", "operator": "In", "values":["ca"]}]}, "topologyKey":"kubernetes.io/hostname"}}]}},
#@              "containers": caContainers(input, orgName, networkSpec)}
#@   elif input.startswith("orderer"):
#@     type = "orderer"
#@     volumes = [{"name":"certsparser", "configMap":{"name":"certsparser"}}, {"name":"mspsecret", "secret":{"secretName":"{}".format(input)}}, {"name":"genesisblock", "secret":{"secretName":"genesisblock"}}]
#@     if networkSpec.k8s.data_persistence == True:
#@        volumes.append({"name":"orderer-data-storage","persistentVolumeClaim":{"claimName":"{}-data".format(input)}})
#@     elif networkSpec.k8s.data_persistence == "local":
#@        volumes.append({"name":"orderer-data-storage","hostPath":{"path":"/shared/{}-data".format(input)}})
#@     end
#@     if networkSpec.tls == "mutual":
#@        volumes += mutualTLS(networkSpec, "volumes")
#@     end
#@     specData = {"volumes": volumes, "affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1, "podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"type", "operator": "In", "values":["{}".format(value)]}]}, "topologyKey":"kubernetes.io/hostname"}}]}},
#@              "containers": ordererContainers(input, orgName, networkSpec, mspId)}
#@   else:
#@     type = "peer"
#@     volumes = [{"name":"certsparser", "configMap":{"name":"certsparser"}}, {"name":"mspsecret", "secret":{"secretName":"{}".format(input)}}]
#@     if networkSpec.k8s.data_persistence == True:
#@        volumes.append({"name":"peer-data-storage","persistentVolumeClaim":{"claimName":"{}-data".format(input)}})
#@     elif networkSpec.k8s.data_persistence == "local":
#@        volumes.append({"name":"peer-data-storage","hostPath":{"path":"/shared/{}-data".format(input)}})
#@     end
#@     if networkSpec.tls == "mutual":
#@        volumes += mutualTLS(networkSpec, "volumes")
#@     end
#@     specData = {"volumes": volumes, "affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1, "podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"type", "operator": "In", "values":["{}".format(value)]}]}, "topologyKey":"kubernetes.io/hostname"}}]}},
#@              "containers": peerContainers(input, orgName, networkSpec, mspId)}
#@   end
#@   selector = {"matchLabels":{"k8s-app": input, "type": type}}
#@   if networkSpec.metrics == True:
#@     if type == "orderer":
#@       metadata = {"labels":{"k8s-app": input, "type":type}, "annotations":{"prometheus.io/scrape": "true", "prometheus.io/path": "/metrics", "prometheus.io/port": "8443", "prometheus.io/scheme": "http"}}
#@     elif type == "peer":
#@       metadata = {"labels":{"k8s-app": input, "type":type}, "annotations":{"prometheus.io/scrape": "true", "prometheus.io/path": "/metrics", "prometheus.io/port": "9443", "prometheus.io/scheme": "http"}}
#@     else:
#@       metadata = {"labels":{"k8s-app": input, "type":type}}
#@     end
#@   else:
#@     metadata = {"labels":{"k8s-app": input, "type":type}}
#@   end
#@   template = {"metadata":metadata, "spec":specData}
#@   output = {"selector":selector, "serviceName": input, "replicas": 1, "template": template}
#@   return output
#@ end

#@ def zkList(numZK, type):
#@   output = []
#@   for i in range(0, data.values.kafka.num_zookeepers):
#@     id = i + 1
#@     if type == "zookeeper":
#@       id = i + 1
#@       output.append("server.{}=zookeeper{}:2888:3888".format(id, i))
#@       zkList = " ".join(output)
#@     elif type == "kafka":
#@       output.append("zookeeper{}:2181".format(i))
#@       zkList = ", ".join(output)
#@     end
#@   end
#@   return zkList
#@ end

#@ if data.values.orderer.orderertype == "kafka":
#@   for i in range(0, data.values.kafka.num_zookeepers):
---
apiVersion: v1
kind: Pod
metadata:
  name: #@ "zookeeper{}".format(i)
  labels:
    k8s-app: #@ "zookeeper{}".format(i)
    type: zookeeper
spec: #@ kafkaSpec("zookeeper{}".format(i), i, 0, "zookeeper", data.values.kafka.num_zookeepers, data.values)
#@   end
#@   for j in range(0, data.values.kafka.num_kafka):
---
apiVersion: v1
kind: Pod
metadata:
  name: #@ "kafka{}".format(j)
  labels:
    k8s-app: #@ "kafka{}".format(j)
    type: kafka
spec: #@ kafkaSpec("kafka{}".format(j), j, data.values.kafka.num_kafka_replications, "kafka", data.values.kafka.num_zookeepers, data.values)
#@   end
#@ end

#@ for i in range(0, len(data.values.peer_organizations)):
#@   organization = data.values.peer_organizations[i]
#@   for j in range(0, organization.num_ca):
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: #@ "ca{}-{}".format(j, organization.name)
spec: #@ spec("ca{}-{}".format(j, organization.name), organization.name, "peer", data.values, organization.msp_id)
#@   end
#@   for j in range(0, organization.num_peers):
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: #@ "peer{}-{}".format(j, organization.name)
spec: #@ spec("peer{}-{}".format(j, organization.name), organization.name, "peer", data.values, organization.msp_id)
#@   end
#@ end

#@ num_organizations = len(data.values.orderer_organizations)
#@ for i in range(0, num_organizations):
#@   organization = data.values.orderer_organizations[i]
#@   for j in range(0, organization.num_ca):
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: #@ "ca{}-{}".format(j, organization.name)
spec: #@ spec("ca{}-{}".format(j, organization.name), organization.name, "orderer", data.values, organization.msp_id)
#@   end
#@   num_orderers = organization.num_orderers
#@   for j in range(0, num_orderers):
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: #@ "orderer{}-{}".format(j, organization.name)
spec: #@ spec("orderer{}-{}".format(j, organization.name), organization.name, "orderer", data.values, organization.msp_id)
#@   end
#@ end
